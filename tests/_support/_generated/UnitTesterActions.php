<?php  //[STAMP] 69f6a724899544d90df8f5f1a45a76b3
namespace Pimcore\Bundle\DataImporterBundle\Tests\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait UnitTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return Pimcore|Module
     * @see \Pimcore\Tests\Helper\Pimcore::getPimcoreModule()
     */
    public function getPimcoreModule() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPimcoreModule', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Symfony\Component\HttpKernel\KernelInterface|null
     * @see \Pimcore\Tests\Helper\Pimcore::getKernel()
     */
    public function getKernel() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getKernel', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Symfony\Component\DependencyInjection\ContainerInterface
     * @see \Pimcore\Tests\Helper\Pimcore::getContainer()
     */
    public function getContainer() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getContainer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataImporterBundle\Tests\Helper\Service::grabService()
     */
    public function grabService(string $serviceId) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set pimcore into admin state
     * @see \Pimcore\Tests\Helper\Pimcore::setAdminMode()
     */
    public function setAdminMode() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setAdminMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set pimcore into non-admin state
     * @see \Pimcore\Tests\Helper\Pimcore::unsetAdminMode()
     */
    public function unsetAdminMode() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('unsetAdminMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\Pimcore::makeHtmlSnapshot()
     */
    public function makeHtmlSnapshot($name = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('makeHtmlSnapshot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Initialize widely used class definitions
     * @see \Pimcore\Bundle\DataImporterBundle\Tests\Helper\Service::initializeDefinitions()
     */
    public function initializeDefinitions() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('initializeDefinitions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class which contains a classification store field
     *
     * @param array $params
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Csstore()
     */
    public function setupPimcoreClass_Csstore($params = [], $name = "csstore", $filename = "classificationstore.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Csstore', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for lazy loading tests.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_LazyLoading()
     */
    public function setupPimcoreClass_LazyLoading($name = "LazyLoading", $filename = "lazyloading\/class_LazyLoading_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_LazyLoading', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for relation tests.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_RelationTest()
     */
    public function setupPimcoreClass_RelationTest($name = "RelationTest", $filename = "relations\/class_RelationTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_RelationTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for relation tests.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_MultipleAssignments()
     */
    public function setupPimcoreClass_MultipleAssignments($name = "MultipleAssignments", $filename = "relations\/class_MultipleAssignments_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_MultipleAssignments', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for Block Test.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Block()
     */
    public function setupPimcoreClass_Block($name = "unittestBlock", $filename = "block-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Block', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for Link Test.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Link()
     */
    public function setupPimcoreClass_Link($name = "unittestLink", $filename = "link-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Link', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class which (hopefully) contains all data types
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Unittest()
     */
    public function setupPimcoreClass_Unittest($name = "unittest", $filename = "class-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Unittest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Used for inheritance tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Inheritance()
     */
    public function setupPimcoreClass_Inheritance($name = "inheritance", $filename = "inheritance.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Inheritance', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up a Fieldcollection
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupFieldcollection_Unittestfieldcollection()
     */
    public function setupFieldcollection_Unittestfieldcollection($name = "unittestfieldcollection", $filename = "fieldcollection-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection_Unittestfieldcollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up a Fieldcollection for lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupFieldcollection_LazyLoadingTest()
     */
    public function setupFieldcollection_LazyLoadingTest($name = "LazyLoadingTest", $filename = "lazyloading\/fieldcollection_LazyLoadingTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection_LazyLoadingTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up a Fieldcollection for localized lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupFieldcollection_LazyLoadingLocalizedTest()
     */
    public function setupFieldcollection_LazyLoadingLocalizedTest($name = "LazyLoadingLocalizedTest", $filename = "lazyloading\/fieldcollection_LazyLoadingLocalizedTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection_LazyLoadingLocalizedTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an object brick used for lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupObjectbrick_LazyLoadingTest()
     */
    public function setupObjectbrick_LazyLoadingTest($name = "LazyLoadingTest", $filename = "lazyloading\/objectbrick_LazyLoadingTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick_LazyLoadingTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an object brick used for lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupObjectbrick_LazyLoadingLocalizedTest()
     */
    public function setupObjectbrick_LazyLoadingLocalizedTest($name = "LazyLoadingLocalizedTest", $filename = "lazyloading\/objectbrick_LazyLoadingLocalizedTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick_LazyLoadingLocalizedTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an object brick
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupObjectbrick_UnittestBrick()
     */
    public function setupObjectbrick_UnittestBrick($name = "unittestBrick", $filename = "brick-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick_UnittestBrick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\Model::setupUnitDefinitions()
     */
    public function setupUnitDefinitions() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupUnitDefinitions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\Model::setupQuantityValueUnits()
     */
    public function setupQuantityValueUnits() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupQuantityValueUnits', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $type
     * @param string|null $name
     * @param bool $mandatory
     * @param bool $index
     * @param bool $visibleInGridView
     * @param bool $visibleInSearchResult
     *
     * @return Data
     * @see \Pimcore\Tests\Helper\AbstractDefinitionHelper::createDataChild()
     */
    public function createDataChild($type, $name = NULL, $mandatory = false, $index = true, $visibleInGridView = true, $visibleInSearchResult = true) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('createDataChild', func_get_args()));
    }
}
