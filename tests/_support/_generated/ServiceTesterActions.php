<?php  //[STAMP] 561e9575b7f34758044f69ab63fa8eec
namespace Pimcore\Bundle\DataHubSimpleRestBundle\Tests\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait ServiceTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::grabService()
     */
    public function grabService(string $serviceId) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Initialize widely used class definitions
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::initializeDefinitions()
     */
    public function initializeDefinitions() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('initializeDefinitions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class which (hopefully) contains all data types
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::setupPimcoreClass_Unittest()
     */
    public function setupPimcoreClass_Unittest($name = "unittest", $filename = "class-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Unittest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $keyPrefix
     * @param bool $save
     * @param bool $publish
     * @param int $seed
     *
     * @return Unittest
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::createFullyFledgedObject()
     */
    public function createFullyFledgedObject($keyPrefix = "", $save = true, $publish = true, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('createFullyFledgedObject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::checkEsMapping()
     */
    public function checkEsMapping() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkEsMapping', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::checkEsEntry()
     */
    public function checkEsEntry(string $id, string $type = "_asset", string $config = "unittest") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkEsEntry', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::checkEsEntryEmpty()
     */
    public function checkEsEntryEmpty(string $id, string $type = "_asset", string $config = "unittest") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkEsEntryEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::checkEsEntryUpdatedText()
     */
    public function checkEsEntryUpdatedText(string $id, string $updatedInput, string $config = "unittest") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkEsEntryUpdatedText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::cleanupEs()
     */
    public function cleanupEs() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('cleanupEs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Bundle\DataHubSimpleRestBundle\Tests\Helper\Service::flushEs()
     */
    public function flushEs() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('flushEs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class which contains a classification store field
     *
     * @param array $params
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Csstore()
     */
    public function setupPimcoreClass_Csstore($params = [], $name = "csstore", $filename = "classificationstore.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Csstore', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for lazy loading tests.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_LazyLoading()
     */
    public function setupPimcoreClass_LazyLoading($name = "LazyLoading", $filename = "lazyloading\/class_LazyLoading_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_LazyLoading', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for relation tests.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_RelationTest()
     */
    public function setupPimcoreClass_RelationTest($name = "RelationTest", $filename = "relations\/class_RelationTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_RelationTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for relation tests.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_MultipleAssignments()
     */
    public function setupPimcoreClass_MultipleAssignments($name = "MultipleAssignments", $filename = "relations\/class_MultipleAssignments_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_MultipleAssignments', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for Block Test.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Block()
     */
    public function setupPimcoreClass_Block($name = "unittestBlock", $filename = "block-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Block', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set up a class used for Link Test.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Link()
     */
    public function setupPimcoreClass_Link($name = "unittestLink", $filename = "link-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Link', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Used for inheritance tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupPimcoreClass_Inheritance()
     */
    public function setupPimcoreClass_Inheritance($name = "inheritance", $filename = "inheritance.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupPimcoreClass_Inheritance', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up a Fieldcollection
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupFieldcollection_Unittestfieldcollection()
     */
    public function setupFieldcollection_Unittestfieldcollection($name = "unittestfieldcollection", $filename = "fieldcollection-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection_Unittestfieldcollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up a Fieldcollection for lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupFieldcollection_LazyLoadingTest()
     */
    public function setupFieldcollection_LazyLoadingTest($name = "LazyLoadingTest", $filename = "lazyloading\/fieldcollection_LazyLoadingTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection_LazyLoadingTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up a Fieldcollection for localized lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupFieldcollection_LazyLoadingLocalizedTest()
     */
    public function setupFieldcollection_LazyLoadingLocalizedTest($name = "LazyLoadingLocalizedTest", $filename = "lazyloading\/fieldcollection_LazyLoadingLocalizedTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection_LazyLoadingLocalizedTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an object brick used for lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupObjectbrick_LazyLoadingTest()
     */
    public function setupObjectbrick_LazyLoadingTest($name = "LazyLoadingTest", $filename = "lazyloading\/objectbrick_LazyLoadingTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick_LazyLoadingTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an object brick used for lazy loading tests
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupObjectbrick_LazyLoadingLocalizedTest()
     */
    public function setupObjectbrick_LazyLoadingLocalizedTest($name = "LazyLoadingLocalizedTest", $filename = "lazyloading\/objectbrick_LazyLoadingLocalizedTest_export.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick_LazyLoadingLocalizedTest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an object brick
     *
     * @param string $name
     * @param string $filename
     *
     * @return Definition|null
     *
     * @throws \Exception
     * @see \Pimcore\Tests\Helper\Model::setupObjectbrick_UnittestBrick()
     */
    public function setupObjectbrick_UnittestBrick($name = "unittestBrick", $filename = "brick-import.json") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick_UnittestBrick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\Model::setupUnitDefinitions()
     */
    public function setupUnitDefinitions() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupUnitDefinitions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\Model::setupQuantityValueUnits()
     */
    public function setupQuantityValueUnits() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupQuantityValueUnits', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $type
     * @param string|null $name
     * @param bool $mandatory
     * @param bool $index
     * @param bool $visibleInGridView
     * @param bool $visibleInSearchResult
     *
     * @return Data
     * @see \Pimcore\Tests\Helper\AbstractDefinitionHelper::createDataChild()
     */
    public function createDataChild($type, $name = NULL, $mandatory = false, $index = true, $visibleInGridView = true, $visibleInSearchResult = true) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('createDataChild', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $name
     *
     * @return ClassDefinition|null
     * @see \Pimcore\Tests\Helper\ClassManager::getClass()
     */
    public function getClass($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getClass', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $name
     *
     * @return bool
     * @see \Pimcore\Tests\Helper\ClassManager::hasClass()
     */
    public function hasClass($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('hasClass', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Create or load a class definition
     *
     * @param string $name
     * @param string $filename
     *
     * @return ClassDefinition
     * @see \Pimcore\Tests\Helper\ClassManager::setupClass()
     */
    public function setupClass($name, $filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupClass', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $name
     *
     * @return FieldcollectionDefinition
     * @see \Pimcore\Tests\Helper\ClassManager::getFieldcollection()
     */
    public function getFieldcollection($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFieldcollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $name
     *
     * @return bool
     * @see \Pimcore\Tests\Helper\ClassManager::hasFieldCollection()
     */
    public function hasFieldCollection($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('hasFieldCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Create or load a fieldcollection
     *
     * @param string $name
     * @param string $filename
     *
     * @return FieldcollectionDefinition
     * @see \Pimcore\Tests\Helper\ClassManager::setupFieldcollection()
     */
    public function setupFieldcollection($name, $filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupFieldcollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $name
     *
     * @return ObjectbrickDefinition|null
     * @see \Pimcore\Tests\Helper\ClassManager::getObjectbrick()
     */
    public function getObjectbrick($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getObjectbrick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $name
     *
     * @return bool
     * @see \Pimcore\Tests\Helper\ClassManager::hasObjectbrick()
     */
    public function hasObjectbrick($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('hasObjectbrick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Create or load a fieldcollection. Needs an array of class IDs which are mapped to the classDefinitions
     * field in the export file.
     *
     * @param string $name
     * @param string $filename
     *
     * @return ObjectbrickDefinition
     * @see \Pimcore\Tests\Helper\ClassManager::setupObjectbrick()
     */
    public function setupObjectbrick($name, $filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setupObjectbrick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Saves JSON to file
     *
     * @param string $filename
     * @param string $json
     *
     * @return string
     * @see \Pimcore\Tests\Helper\ClassManager::saveJson()
     */
    public function saveJson($filename, $json) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('saveJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertBooleanSelect()
     */
    public function assertBooleanSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertBooleanSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertBricks()
     */
    public function assertBricks(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertBricks', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertCountry()
     */
    public function assertCountry(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCountry', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param mixed $expected
     * @param mixed $value
     *
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertIsEqual()
     */
    public function assertIsEqual($object, $field, $expected, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertCountryMultiSelect()
     */
    public function assertCountryMultiSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCountryMultiSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertDate()
     */
    public function assertDate(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertEmail()
     */
    public function assertEmail(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertEncrypted()
     */
    public function assertEncrypted(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEncrypted', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertExternalImage()
     */
    public function assertExternalImage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertExternalImage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertFieldCollection()
     */
    public function assertFieldCollection(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFieldCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertFirstname()
     */
    public function assertFirstname(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFirstname', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertInput()
     */
    public function assertInput(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInput', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertGender()
     */
    public function assertGender(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGender', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertGeobounds()
     */
    public function assertGeobounds(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGeobounds', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertGeoCoordinates()
     */
    public function assertGeoCoordinates(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGeoCoordinates', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param          $comparisonObject
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertGeopolygon()
     */
    public function assertGeopolygon(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGeopolygon', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertHotspotImage()
     */
    public function assertHotspotImage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertHotspotImage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertAssetsEqual()
     */
    public function assertAssetsEqual(\Pimcore\Model\Asset $asset1, \Pimcore\Model\Asset $asset2) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertAssetsEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertElementsEqual()
     */
    public function assertElementsEqual(\Pimcore\Model\Element\ElementInterface $e1, \Pimcore\Model\Element\ElementInterface $e2) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertElementsEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertHref()
     */
    public function assertHref(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertHref', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertImage()
     */
    public function assertImage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertImage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertImageGallery()
     */
    public function assertImageGallery(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertImageGallery', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertInputQuantityValue()
     */
    public function assertInputQuantityValue(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInputQuantityValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertLanguage()
     */
    public function assertLanguage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLanguage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertLanguageMultiSelect()
     */
    public function assertLanguageMultiSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLanguageMultiSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertLastname()
     */
    public function assertLastname(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLastname', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertLink()
     */
    public function assertLink(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertDocumentsEqual()
     */
    public function assertDocumentsEqual(\Pimcore\Model\Document $doc1, \Pimcore\Model\Document $doc2) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDocumentsEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertMultiSelect()
     */
    public function assertMultiSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertMultiSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertMultihref()
     */
    public function assertMultihref(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertMultihref', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertNewsletterActive()
     */
    public function assertNewsletterActive(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNewsletterActive', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertCheckbox()
     */
    public function assertCheckbox(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCheckbox', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertNewsletterConfirmed()
     */
    public function assertNewsletterConfirmed(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNewsletterConfirmed', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertNumber()
     */
    public function assertNumber(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNumber', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete|DataObject\Fieldcollection\Data\AbstractData|DataObject\Objectbrick\Data\AbstractData $object
     * @param string $field
     * @param Concrete|null $comparisonObject
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertObjects()
     */
    public function assertObjects($object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertObjectsWithMetadata()
     */
    public function assertObjectsWithMetadata(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjectsWithMetadata', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $field
     * @param int $seed
     *
     * @return DataObject\Data\ObjectMetadata[]
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::getObjectsWithMetadataFixture()
     */
    public function getObjectsWithMetadataFixture($field, $seed) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getObjectsWithMetadataFixture', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertPassword()
     */
    public function assertPassword(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertPassword', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertQuantityValue()
     */
    public function assertQuantityValue(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQuantityValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertRgbaColor()
     */
    public function assertRgbaColor(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertRgbaColor', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertSelect()
     */
    public function assertSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertIndexFieldSelectionCombo()
     */
    public function assertIndexFieldSelectionCombo(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIndexFieldSelectionCombo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertIndexFieldSelection()
     */
    public function assertIndexFieldSelection(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIndexFieldSelection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertIndexFieldSelectionField()
     */
    public function assertIndexFieldSelectionField(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIndexFieldSelectionField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertSlider()
     */
    public function assertSlider(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSlider', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertStructuredTable()
     */
    public function assertStructuredTable(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStructuredTable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertTable()
     */
    public function assertTable(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertTime()
     */
    public function assertTime(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTime', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertUrlSlug()
     */
    public function assertUrlSlug(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertUrlSlug', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertUser()
     */
    public function assertUser(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertUser', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param array $returnParams
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertVideo()
     */
    public function assertVideo(\Pimcore\Model\DataObject\Concrete $object, $field, $seed, $returnParams) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertVideo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertWysiwyg()
     */
    public function assertWysiwyg(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertWysiwyg', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::assertTextarea()
     */
    public function assertTextarea(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTextarea', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::checkValidityGeobounds()
     */
    public function checkValidityGeobounds(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkValidityGeobounds', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::checkValidityGeoCoordinates()
     */
    public function checkValidityGeoCoordinates(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkValidityGeoCoordinates', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::checkValidityGeopolyline()
     */
    public function checkValidityGeopolyline(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkValidityGeopolyline', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::checkValidityGeopolygon()
     */
    public function checkValidityGeopolygon(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkValidityGeopolygon', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::checkValidityQuantityValue()
     */
    public function checkValidityQuantityValue(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkValidityQuantityValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::checkValidityRgbaColor()
     */
    public function checkValidityRgbaColor(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkValidityRgbaColor', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillBooleanSelect()
     */
    public function fillBooleanSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillBooleanSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillBricks()
     */
    public function fillBricks(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillBricks', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillCalculatedValue()
     */
    public function fillCalculatedValue(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillCalculatedValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillCountry()
     */
    public function fillCountry(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillCountry', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillCountryMultiSelect()
     */
    public function fillCountryMultiSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillCountryMultiSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillDate()
     */
    public function fillDate(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillDate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillEmail()
     */
    public function fillEmail(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillEncryptedField()
     */
    public function fillEncryptedField(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillEncryptedField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillExternalImage()
     */
    public function fillExternalImage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillExternalImage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillFieldCollection()
     */
    public function fillFieldCollection(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillFieldCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillFirstname()
     */
    public function fillFirstname(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillFirstname', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillInput()
     */
    public function fillInput(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillInput', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillGender()
     */
    public function fillGender(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillGender', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillGeobounds()
     */
    public function fillGeobounds(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillGeobounds', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillGeoCoordinates()
     */
    public function fillGeoCoordinates(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillGeoCoordinates', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillGeopolygon()
     */
    public function fillGeopolygon(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillGeopolygon', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillGeopolyline()
     */
    public function fillGeopolyline(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillGeopolyline', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillHotspotImage()
     */
    public function fillHotspotImage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillHotspotImage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillHref()
     */
    public function fillHref(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillHref', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillImage()
     */
    public function fillImage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillImage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillImageGallery()
     */
    public function fillImageGallery(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillImageGallery', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillInputQuantityValue()
     */
    public function fillInputQuantityValue(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillInputQuantityValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillLanguage()
     */
    public function fillLanguage(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillLanguage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillLanguageMultiSelect()
     */
    public function fillLanguageMultiSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillLanguageMultiSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillLastname()
     */
    public function fillLastname(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillLastname', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillLink()
     */
    public function fillLink(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillMultiSelect()
     */
    public function fillMultiSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillMultiSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillMultihref()
     */
    public function fillMultihref(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillMultihref', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillNewsletterActive()
     */
    public function fillNewsletterActive(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillNewsletterActive', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillCheckbox()
     */
    public function fillCheckbox(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillCheckbox', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillNewsletterConfirmed()
     */
    public function fillNewsletterConfirmed(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillNewsletterConfirmed', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillNumber()
     */
    public function fillNumber(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillNumber', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete|DataObject\Fieldcollection\Data\AbstractData|DataObject\Objectbrick\Data\AbstractData $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillObjects()
     */
    public function fillObjects($object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillObjects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillObjectsWithMetadata()
     */
    public function fillObjectsWithMetadata(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillObjectsWithMetadata', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillPassword()
     */
    public function fillPassword(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillPassword', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillQuantityValue()
     */
    public function fillQuantityValue(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillQuantityValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::mapUnit()
     */
    public function mapUnit($seed) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mapUnit', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillRgbaColor()
     */
    public function fillRgbaColor(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillRgbaColor', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillSelect()
     */
    public function fillSelect(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillSelect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillIndexFieldSelectionCombo()
     */
    public function fillIndexFieldSelectionCombo(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillIndexFieldSelectionCombo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillIndexFieldSelectionField()
     */
    public function fillIndexFieldSelectionField(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillIndexFieldSelectionField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillIndexFieldSelection()
     */
    public function fillIndexFieldSelection(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillIndexFieldSelection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillSlider()
     */
    public function fillSlider(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillSlider', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillStructuredtable()
     */
    public function fillStructuredtable(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillStructuredtable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillTable()
     */
    public function fillTable(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillTable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillTime()
     */
    public function fillTime(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillTime', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param string|null $language
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillUrlSlug()
     */
    public function fillUrlSlug(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $language = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillUrlSlug', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillUser()
     */
    public function fillUser(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillUser', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @param array $returnData
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillVideo()
     */
    public function fillVideo(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1, $returnData = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillVideo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillWysiwyg()
     */
    public function fillWysiwyg(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillWysiwyg', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Concrete $object
     * @param string $field
     * @param int $seed
     * @see \Pimcore\Tests\Helper\DataType\TestDataHelper::fillTextarea()
     */
    public function fillTextarea(\Pimcore\Model\DataObject\Concrete $object, $field, $seed = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillTextarea', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\AbstractTestDataHelper::assertObjectsEqual()
     */
    public function assertObjectsEqual(\Pimcore\Model\DataObject\AbstractObject $obj1, \Pimcore\Model\DataObject\AbstractObject $obj2) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjectsEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return Pimcore|Module
     * @see \Pimcore\Tests\Helper\Pimcore::getPimcoreModule()
     */
    public function getPimcoreModule() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPimcoreModule', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Symfony\Component\HttpKernel\KernelInterface|null
     * @see \Pimcore\Tests\Helper\Pimcore::getKernel()
     */
    public function getKernel() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getKernel', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Symfony\Component\DependencyInjection\ContainerInterface
     * @see \Pimcore\Tests\Helper\Pimcore::getContainer()
     */
    public function getContainer() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getContainer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set pimcore into admin state
     * @see \Pimcore\Tests\Helper\Pimcore::setAdminMode()
     */
    public function setAdminMode() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setAdminMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set pimcore into non-admin state
     * @see \Pimcore\Tests\Helper\Pimcore::unsetAdminMode()
     */
    public function unsetAdminMode() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('unsetAdminMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Pimcore\Tests\Helper\Pimcore::makeHtmlSnapshot()
     */
    public function makeHtmlSnapshot($name = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('makeHtmlSnapshot', func_get_args()));
    }
}
